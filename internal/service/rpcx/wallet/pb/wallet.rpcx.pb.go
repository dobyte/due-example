// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.21.6
// source: wallet.proto

package pb

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type WalletAble interface {
	// WalletAble can be used for interface verification.

	// IncrCoin is server rpc method as defined
	IncrCoin(ctx context.Context, args *IncrCoinRequest, reply *IncrCoinReply) (err error)

	// DecrCoin is server rpc method as defined
	DecrCoin(ctx context.Context, args *DecrCoinRequest, reply *DecrCoinReply) (err error)
}

// ================== server skeleton ===================
type WalletImpl struct{}

// ServeForWallet starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForWallet(addr string) error {
	s := server.NewServer()
	s.RegisterName("Wallet", new(WalletImpl), "")
	return s.Serve("tcp", addr)
}

// IncrCoin is server rpc method as defined
func (s *WalletImpl) IncrCoin(ctx context.Context, args *IncrCoinRequest, reply *IncrCoinReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = IncrCoinReply{}

	return nil
}

// DecrCoin is server rpc method as defined
func (s *WalletImpl) DecrCoin(ctx context.Context, args *DecrCoinRequest, reply *DecrCoinReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = DecrCoinReply{}

	return nil
}

// ================== client stub ===================
// Wallet is a client wrapped XClient.
type WalletClient struct {
	xclient client.XClient
}

// NewWalletClient wraps a XClient as WalletClient.
// You can pass a shared XClient object created by NewXClientForWallet.
func NewWalletClient(xclient client.XClient) *WalletClient {
	return &WalletClient{xclient: xclient}
}

// NewXClientForWallet creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForWallet(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Wallet", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// IncrCoin is client rpc method as defined
func (c *WalletClient) IncrCoin(ctx context.Context, args *IncrCoinRequest) (reply *IncrCoinReply, err error) {
	reply = &IncrCoinReply{}
	err = c.xclient.Call(ctx, "IncrCoin", args, reply)
	return reply, err
}

// DecrCoin is client rpc method as defined
func (c *WalletClient) DecrCoin(ctx context.Context, args *DecrCoinRequest) (reply *DecrCoinReply, err error) {
	reply = &DecrCoinReply{}
	err = c.xclient.Call(ctx, "DecrCoin", args, reply)
	return reply, err
}

// ================== oneclient stub ===================
// WalletOneClient is a client wrapped oneClient.
type WalletOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewWalletOneClient wraps a OneClient as WalletOneClient.
// You can pass a shared OneClient object created by NewOneClientForWallet.
func NewWalletOneClient(oneclient *client.OneClient) *WalletOneClient {
	return &WalletOneClient{
		serviceName: "Wallet",
		oneclient:   oneclient,
	}
}

// ======================================================

// IncrCoin is client rpc method as defined
func (c *WalletOneClient) IncrCoin(ctx context.Context, args *IncrCoinRequest) (reply *IncrCoinReply, err error) {
	reply = &IncrCoinReply{}
	err = c.oneclient.Call(ctx, c.serviceName, "IncrCoin", args, reply)
	return reply, err
}

// DecrCoin is client rpc method as defined
func (c *WalletOneClient) DecrCoin(ctx context.Context, args *DecrCoinRequest) (reply *DecrCoinReply, err error) {
	reply = &DecrCoinReply{}
	err = c.oneclient.Call(ctx, c.serviceName, "DecrCoin", args, reply)
	return reply, err
}
